#!/bin/bash

# START USAGE DOCUMENTATION
# dock is a tool for defining, building, and running self-contained
# development environments inside Docker containers.
#
# Usage: dock [options] [command]
# -a                    Attach to already-running container
#
# -c config-file        Configuration file to use (default is .dock)
#
# -d                    Detach and run container in the background
#
# -e                    Extend an existing Dock container with a new project
#
# -t                    Terraform an extended Dock container
#
# -f                    Force creation of new container (destroying any
#                       already-existing container).
# -q                    Don't display any Dock-specific output (just output from
#                       the command you are running in the container)
# -v                    Display version information.
# -V                    Display extended version information (for bug reports)
# END USAGE DOCUMENTATION

set -euo pipefail

dock_version="1.4.2"
dock_bin="$0"

# We want all output to go to STDERR so that STDOUT receives output from the
# original command. This makes shebang Dock scripts more useful as they will
# appear to act exactly like the original script (if you ignore STDERR).
redirect_stdout() {
  exec 5<&1
  exec 1>&2
}
redirect_stdout

restore_stdout() {
  exec 1>&5
}

default_conf_file=".dock"
default_compose_file="docker-compose.yml"

# We use \033 instead of \e since Macs don't support \e as of Mountain Lion
red="\033[0;31m"
green="\033[0;32m"
yellow="\033[0;33m"
cyan="\033[0;36m"
reset="\033[0m"

error() {
  quiet && return || true
  if interactive; then
    echo -en "${red}ERROR${reset}: "
  else
    echo -n "ERROR: "
  fi
  echo "$@"
}

warn() {
  quiet && return || true
  if interactive; then
    echo -en "${yellow}WARN${reset}: "
  else
    echo -n "WARN: "
  fi
  echo "$@"
}

notice() {
  quiet && return || true
  if interactive; then
    echo -e "${cyan}$@${reset}"
  else
    echo "$@"
  fi
}

info() {
  quiet && return || true
  echo "$@"
}

success() {
  quiet && return || true
  if interactive; then
    echo -e "${green}$@${reset}"
  else
    echo "$@"
  fi
}

in_path() {
  [ "$(type -t "$1")" = file ] && command -v "$1" >/dev/null 2>&1
}

display_debug_version_info() {
  echo "Dock:   $(dock_version)"
  echo -n "Docker: "
  if in_path docker; then
    echo "$(docker --version)"
  else
    echo "Docker executable not found in PATH!"
  fi
  echo "Bash:   $BASH_VERSION"
  echo "OS:     $(uname -a)"
}

display_usage() {
  start_line="$(grep -n 'START USAGE DOCUMENTATION' $dock_bin | head -n1 | cut -d: -f1)"
  end_line="$(grep -n 'END USAGE DOCUMENTATION' $dock_bin | head -n1 | cut -d: -f1)"
  tail -n+$(expr $start_line + 1) $dock_bin | head -n$(expr $end_line - $start_line - 1) | sed 's|# ||' | sed 's|#||' || true
}

ask() {
  local question="$1"
  local default="$2"
  local var_name="$3"
  if interactive && ! quiet; then
    echo -en "${cyan}${question}${reset} [$default] "
    read $var_name
    [ -z "${!var_name}" ] && eval $var_name="$default" || true
  else
    eval $var_name="$default"
  fi
}

group_id() {
  id -g
}

user_id() {
  id -u
}

attach_command() {
  if [ "${#@}" -eq 0 ]; then
    error "Must specify at least one argument for attach command!"
    return 1
  else
    attach_command_args=("${@}")
  fi
}

build_arg() {
  if [ -z "${1+x}" ]; then
    error "Must provide name and value for build argument!"
    return 1
  elif [ -z "${2+x}" ]; then
    error "Must provide value for build argument $1!"
    return 1
  else
    build_flags "--build-arg" "$1=$2"
  fi
}

build_context() {
  if [ -z "${1+x}" ]; then
    echo "${build_context}"
  else
    build_context="${repo_root}/$1"
  fi
}

build_flags() {
  if [ "${#@}" -gt 0 ]; then
    build_args+=("$@")
  else
    error "Must provide one or more arguments for build_flags!"
    return 1
  fi
}

container_name() {
  if [ -z "${1+x}" ]; then
    # No argument specified, so return the current name
    echo "${container_name}"
  else
    # Otherwise set the current name
    if [ -z "$1" ]; then
      error "Cannot specify an empty name for container!"
      return 1
    fi
    container_name="$1"
  fi
}

default_command() {
  if [ "${#@}" -eq 0 ]; then
    error "Must specify at least one argument for default command!"
    return 1
  else
    command_args=("${@}")
  fi
}

detach_keys() {
  if [ -z "${1+x}" ]; then
    error "Must provide key sequence as argument!"
    return 1
  else
    detach_keys="$1"
  fi
}

dockerfile() {
  if [ -z "${1+x}" ]; then
    error "Must provide path to Dockerfile as argument!"
    return 1
  else
    dockerfile="$1"
  fi
}

dock_in_dock() {
  if [ -z "${1+x}" ]; then
    error "Must provide true/false as argument to dock_in_dock!"
    return 1
  else
    dock_in_dock="$1"
  fi
}

dock_version() {
  echo "$dock_version"
}

entrypoint() {
  if [ -z "${1+x}" ]; then
    error "Must provide path to entrypoint executable as argument!"
    return 1
  else
    entrypoint="$1"
  fi
}

container_hostname() {
  if [ -z "${1+x}" ]; then
    # No argument specified, so return the current name if defined
    if [ -n "${container_hostname+x}" ]; then
      echo "${container_hostname}"
    else
      error "You must set an explicit hostname first!"
      return 1
    fi
  else
    # Otherwise set the current name
    if [ -z "$1" ]; then
      error "Cannot specify an empty name for hostname!"
      return 1
    fi
    container_hostname="$1"
  fi
}

image() {
  if [ -z "${1+x}" ]; then
    error "Must provide image name as argument!"
    return 1
  else
    image="$1"
  fi
}

pull_latest() {
  if [ -z "${1+x}" ] || "$1"; then
    pull=true
  else
    pull=false
  fi
}

osx() {
  [ "$(uname)" = Darwin ]
}

linux() {
  [ "$(uname)" = Linux ]
}

interactive() {
  [ -t 0 ]
}

repo_path() {
  echo "${repo_root}"
}

detach() {
  # If called without any arguments, assume "true"
  if [ -z "${1+x}" ] || $1; then
    detach=true
  else
    detach=false
  fi
}

env_var() {
  if [ -z "${1+x}" ]; then
    error "Must provide name and value for environment variable!"
    return 1
  elif [ -z "${2+x}" ]; then
    error "Must provide value for environment variable $1!"
    return 1
  else
    env+=("$1=$2")
  fi
}

optional_env_var() {
  if [ -z "${1+x}" ]; then
    error "Must provide name of optional environment variable!"
    return 1
  else
    optional_env+=("$1")
  fi
}

privileged() {
  if [ -z "${1+x}" ]; then
    # If called without any arguments, return whether it is privileged
    $privileged
  elif "$1"; then
    privileged=true
  else
    privileged=false
  fi
}

publish() {
  if [ -z "${1+x}" ]; then
    error "Must provide port publish specification as argument!"
    return 1
  else
    exposed_ports+=("$1")
  fi
}

quiet() {
  [ -n "${quiet+x}" ] && $quiet
}

required_env_var() {
  if [ -z "${1+x}" ]; then
    error "Must provide name of required environment variable!"
    return 1
  else
    required_env+=("$1")
  fi
}

run_flags() {
  if [ "${#@}" -gt 0 ]; then
    run_args+=("$@")
  else
    error "Must provide one or more arguments for run_flags!"
    return 1
  fi
}

volume() {
  if [ -z "${1+x}" ]; then
    error "Must provide volume specification!"
    return 1
  else
    volumes+=("$1")
  fi
}

label() {
  if [ "${#@}" -ne 2 ]; then
    error "Must provide exactly two arguments for label key, value pair"
    return 1
  else
    labels+=( "$1=$2" )
  fi
}

workspace_path() {
  if [ -z "${1+x}" ]; then
    # No argument specified, so return the current name
    echo "${workspace_dir}"
  else
    # Otherwise set the current name
    if [ -z "$1" ]; then
      error "Cannot specify an empty path for workspace_path!"
      return 1
    fi
    workspace_dir="$1"
  fi
}

container_running() {
  target_container=$container_name
  if [ -n "${1+x}" ]; then
    target_container="$1"
  fi

  [ "$(docker inspect --format '{{ .State.Status }}' $target_container 2>&1)" = "running" ]
}

container_exists() {
  target_container=$container_name
  if [ -n "${1+x}" ]; then
    target_container="$1"
  fi

  docker inspect $target_container >/dev/null 2>&1
}

image_is_local() {
  if [ -z "${1+x}" ]; then
    error "Must provide image specification"
    return 1
  fi

  if ! docker images --format '{{.Repository}}:{{.Tag}}' | grep $1 > /dev/null 2>&1; then
    notice "Image $1 not found within local docker image repository."
    return 1
  fi

  info "Image $1 found within local docker image repository"
}

pull_image() {
  if [ -z "${1+x}" ]; then
    error "Must provide image specification"
    return 1
  fi

  local image=$1
  notice "Ensuring we have the latest version of $image locally..."
  pull_args=("docker" "pull" "$image")
  if quiet; then
    "${pull_args[@]}" 2>&1 >/dev/null
  else
    "${pull_args[@]}"
  fi

  return $?
}

source_script() {
  local file=$1
  if [ -e "$file" ]; then
    if ! source "$file"; then
      error "Problem sourcing $file"
      return 1
    fi
  else
    error "File '$file' does not exist!"
    return 1
  fi
}

is_valid_docker_compose() {
  local file=$1
  if [ -e "$file" ]; then
    if ! docker-compose config 2>&1>/dev/null; then
      error "Invalid docker-compose schema detected!"
      return 1
    fi
  else
    error "$file does NOT exist!"
    return 1
  fi
}

extend_container() {
  if [ -z "${1+x}" ]; then
    error "Must provide a Dock container ID to extend!"
    return 1
  fi

  notice "Extending Dock: $1..."

  # Set image and container names accordingly.
  # We use the image to store Dock container state (with the exception of volume details
  # for obvious reasons with respect to how Docker operates) and inherit from during subsequent
  # extension operations
  container_name "$(convert_to_valid_container_name $1)"
  image "dock-image:$container_name"

  # set workspace directory to project repo root
  # This step is necessary to ensure that project src is copied into a directory unique to it
  workspace_path "$(pwd)"

  # automatically detach from container to allow for process to continue after container
  # (re)creation and allow saving of intermediate container state as image to occur
  detach true

  # add Dock environment construction labels
  label "dock.${project}" "$(pwd)/.dock"
  label "compose.${project}" "$(pwd)/docker-compose.yml"

  # If we're already inside a Dock environment, just execute the command.
  # This allows us to reuse scripts with dock in their shebang line in other
  # Dock-ified scripts without invoking dock-within-dock (which is likely not what
  # we want).
  if [ -n "${INSIDE_DOCK+x}" ]; then
    exec "${command_args[@]}"
  fi

  # Compile run args based on current configuration
  compile_run_args

  # Proceed to launch extended dock container...
  temp_container_name="temp"
  if ! container_exists $container_name; then
    # If the targeted dock environment does not exist, create a new image
    # based on the dock configuration of the current project
    notice "Dock container $container_name NOT found; creating new Dock $container_name for $project..."
  else
    # Target container matches existing Dock container, reuse...
    info "Dock container $container_name found, extending for $project..."
    if [ -n "$dockerfile" ]; then
      # Identify image of existing Dock container and build against it
      local dock_image=$(docker inspect --format='{{ .Config.Image }}' $container_name)
      sed "s|FROM.*|FROM ${dock_image}|" "$dockerfile" > "${build_context}/temp_dockerfile"
      dockerfile "${build_context}/temp_dockerfile"
    fi
    # Rename existing container to $temp_container_name so that we can launch the replacement container with
    # the exact same name and still have access to the previous version of the container's
    # volumes
    docker rename $container_name $temp_container_name
    run_args+=("--volumes-from" "$temp_container_name")

    # Ensure we don't attempt to pull the temp FROM image from the hub since it is only for intermediary
    # construction purposes and should not exist
    pull=false
  fi

  # Build the project's dockerfile if necessary
  if [ -n "$dockerfile" ]; then
    if $pull; then
      build_args+=("--pull")
    fi
    build_args+=("--file" "$dockerfile" "--tag" "$image" "$build_context")
    if quiet; then
      "${build_args[@]}" 2>&1 >/dev/null
    else
      "${build_args[@]}"
    fi
    notice "Built $project dockerfile into $image!"
    # Cleanup the temporary dockerfile if necessary
    rm --force "${build_context}/temp_dockerfile"
  fi

  run_args+=("$image")
  if [ "${#command_args[@]}" -gt 0 ]; then
    run_args+=("${command_args[@]}")
  fi

  restore_stdout
  "${run_args[@]}"
  if [ $? -ne 0 ]; then
    return 1
  fi

  docker commit $container_name $image 2>&1 >/dev/null
  # Cleanup intermediary temporary container if necessary
  if container_exists $temp_container_name; then
    docker stop $temp_container_name 2>&1 >/dev/null || true
    docker rm $temp_container_name 2>&1 >/dev/null || true
  fi

  success "Dock $container_name has successfully been extended!"
}

get_labels() {
  if [ -z "${1+x}" ]; then
    error "Must provide docker object to inspect!"
    return 1
  fi

  labels=$(docker inspect --format='{{json .Config.Labels}}' "$1")
  echo "$labels"
}

get_label_keys() {
  if [ -z "${1+x}" ]; then
    error "Must provide docker object to inspect!"
    return 1
  fi

  local keyword=""
  if [ -n "${2+x}" ]; then
    keyword="$2"
  fi

  keys=$(docker inspect --format='{{json .Config.Labels}}' "$1" | jq --arg k $keyword \
    '. | keys[] | select(startswith($k))' | sed -e 's/^"//' -e 's/"$//')
  echo "$keys"
}

get_label_value() {
  if [ -z "${1+x}" ]; then
    error "Must provide docker object to inspect!"
    return 1
  fi

  if [ -z "${2+x}" ]; then
    error "Must provide label key to target!"
    return 1
  fi

  obj=$1
  key=$2
  value=$(docker inspect --format='{{json .Config.Labels}}' $obj | jq --arg k $key \
    '.[$k]' | sed -e 's/^"//' -e 's/"$//')

  # Remove string escapes applied by docker's label logic and return
  echo -e "$(echo -e "$value" | sed -e 's/\\\"/"/g')"
}

terraform_container() {
  if [ -z "${1+x}" ]; then
    error "Must provide a Dock container ID to extend!"
    return 1
  fi

  notice "Terraforming Dock: $container_name..."
  local container_name="$(convert_to_valid_container_name $1)"
  projects_to_compose=$(get_label_keys $container_name "compose.")

  # Recreate temporary workspace for new terraform operation
  tmp_workspace="/tmp/compose"
  docker exec $container_name rm --recursive --force $tmp_workspace
  docker exec $container_name mkdir $tmp_workspace

  compose_args=("docker-compose")
  # Resolve project docker-compose files and cache in temporary workspace
  for project in ${projects_to_compose[@]}; do
    compose_path=$(get_label_value $container_name $project)
    local compose_dir=$(dirname $compose_path)
    local output_file="${project}.yml"
    docker exec $container_name bash -c "\
      # change directory to project compose file location
      cd $compose_dir;
      # resolve project compose file
      docker-compose config > ${tmp_workspace}/$output_file"
    compose_args+=("--file" "$output_file")
  done
  compose_args+=("up" "-d")

  # Purge all existing containers within Dock environment
  info "Purging existing Dock environment..."
  docker exec $container_name bash -c "\
    docker stop $(docker ps -aq) >/dev/null || true;
    docker rm $(docker ps -aq) >/dev/null || true"

  # Compose environment from temporary workspace
  info "Terraforming and recomposing Dock environment..."
  compose_cmd="${compose_args[@]}"
  docker exec $container_name bash -c "\
    # change directory to temporary workspace
    cd $tmp_workspace;
    # execute environment composition/merge
    $compose_cmd"

  success "Dock environment successfully terraformed!"
}

convert_to_valid_container_name() {
  # Container names are only allowed to contain characters from [a-zA-Z0-9_-]
  # so ensure that the input does not contain chars like /,:
  # This method isn't exhaustive and currently just handles its current use case
  if [ -z "${1+x}" ]; then
    error "Must provide microenvironment ID to extend"
    return 1
  fi

  name=$1
  # remove ':'s
  name="${name//:/_}"
  # remove '/'s
  name="${name////-}"

  if [ "$name" != "$1" ]; then
    notice "The provided container name, ${1}, is not in a valid format - converted to ${name}."
  fi
  echo $name
}

destroy_container() {
  target_container=$container_name
  if [ -n "${1+x}" ]; then
    target_container="$1"
  fi

  if container_running $target_container; then
    docker stop $target_container >/dev/null || true
  fi
  if container_running; then
    docker kill $target_container >/dev/null || true
  fi
  if container_exists; then
    docker rm --force $target_container >/dev/null
  fi
}

port_taken_on_localhost() {
  if osx; then
    # show -a(ll sockets) and -n(umeric addresses)
    echo | netstat -a -n 2>/dev/null | grep $1 >/dev/null 2>&1
  else
    echo | netstat --numeric --listening 2>/dev/null | grep $1 >/dev/null 2>&1
  fi
}

process_exposed_ports() {
  forwarded_ports=() # OS X: Ports forwarded from the local machine to the VM
  published_ports=() # Ports published by the container on the Docker host

  # Need to explicitly check length of array before accessing it
  if [ ${#exposed_ports[@]} -eq 0 ]; then
    return
  fi

  for port_spec in ${exposed_ports[@]}; do
    colons="$(grep -o ':' <<< "$port_spec" | wc -l | tr -d '[[:space:]]')"
    case $colons in
    0)
      warn "Ignoring port specification $port_spec as it does not specify the host port"
      ;;
    1)
      local host_port="$(cut -d: -f1 <<< "$port_spec")"

      if port_taken_on_localhost $host_port; then
        warn "Ignoring port specification $port_spec since another process has already bound to localhost:$host_port"
        warn "You're likely already running the service locally."
      else
        published_ports+=("$port_spec")
      fi
      ;;
    2)
      warn "Ignoring port specification since it contains a specific host address: '$port_spec'"
      ;;
    *)
      error "Invalid port specification: '$port_spec'"
      return 1
      ;;
    esac
  done
}

resolve_symlink() {
  local file="$1"

  (
    cd $(dirname "$file")
    file="$(basename "$file")"

    # Iterate down (possible) chain of symlinks
    while [ -L "$file" ]; do
      file="$(readlink "$file")"
      cd "$(dirname "$file")"
      file="$(basename "$file")"
    done

    physical_dir="$(pwd -P)"
    echo $physical_dir/$file
  )
}

# We don't want to deal with managing all the user's dependencies, so check for
# key ones and get them to install it however they prefer.
check_dependencies() {
  if ! in_path docker; then
    error 'Cannot find `docker` executable in your path!'
    error 'Have you installed Docker on this machine?'
    return 1
  elif ! docker info >/dev/null 2>&1; then
    error 'Cannot connect to the Docker daemon'
    info 'Is the daemon running on this host?'
    info 'Does your user have permission to communicate with the Docker socket?'
    return 1
  fi
}

initialize_variables() {
  if ! git rev-parse --git-dir >/dev/null 2>&1; then
    error "You must be in a Git repository to run: $(basename $0) $@"
    return 1
  fi

  repo_root=$(git rev-parse --show-toplevel)
  repo=$(basename "$repo_root")
  repo=${repo//[^a-zA-Z0-9.-]/-} # Ensure slug is a valid name for Docker
  build_args=("docker" "build")
  build_context="${repo_root}"
  run_args=("docker" "run")
  dockerfile=""
  image=""
  detach=false
  detach_keys="ctrl-x,x" # Ctrl-P is a useful shortcut when using Bash
  dock_in_dock=false # Don't create recursive Dock containers by default
  pull=false
  privileged=false
  env=()
  optional_env=()
  required_env=()
  container_name="$repo-dock"
  volumes=("$(resolve_symlink $dock_bin):/usr/local/bin/dock")
  labels=()
  exposed_ports=()
  workspace_dir="/workspace"
  force_tty=false
  attach_command_args=("sh")
  command_args=()

  # When running on a Mac, all Docker commands are actually run as a user on a VM
  # which has a different UID/GID than your Mac user. Set helper variables which
  # can be used in .dock files to use the correct UID/GID without having to know
  # whether developer is running Mac or Linux
  current_uid="$(id -u)"
  current_gid="$(id -g)"

  # Since the configuration file must be sourced before command line arguments are
  # processed (in order to allow command line args to override config), we have to
  # do a separate argument parse step to determine the custom config file.
  dock_file="$default_conf_file"
  explicit_dock_config=false
  while getopts ":c:" opt; do
    case $opt in
      c)
        dock_file="$OPTARG"
        explicit_dock_config=true
        ;;
    esac
  done
  OPTIND=1 # Reset index so that we can parse the arguments with getopts again

  # Load additional variables from config file
  # (useful for defining default image/dockerfile).
  # Command line arguments will override these if present.
  if [ -e "$dock_file" ]; then
    if ! source_script "$dock_file"; then
      error "Problem sourcing $dock_file"
      return 1
    fi
  elif $explicit_dock_config; then
    error "Dock configuration file '$dock_file' does not exist!"
    return 1
  fi

  # set project to repo name if unset in dock config
  project="${project:=$(basename $(pwd))}"
}

attach_to_container() {
  target_container=$container_name
  if [ -n "${1+x}" ]; then
    target_container="$1"
  fi

  if container_running $target_container; then
    exec_args=("docker" "exec" "--interactive" "--tty")
    if $privileged; then
      exec_args+=("--privileged")
    fi
    exec_args+=("$target_container" "${attach_command_args[@]}")

    exec "${exec_args[@]}"
  elif container_exists; then
    error "Container $container_name exists but is not running, so you can't attach."
    return 1
  else
    error "No container named $container_name is currently running."
    error "You must start the container first before you can attach!"
    return 1
  fi
}

check_for_existing_container() {
  target_container=$container_name
  if [ -n "${1+x}" ]; then
    target_container="$1"
  fi

  if container_exists $target_container; then
    if [ "${DOCK_FORCE_DESTROY:-0}" = 1 ]; then
      notice "Destroying container $target_container..."
      destroy_container $target_container
      notice "Container $target_container destroyed."
      return
    fi

    if container_running $target_container; then
      error "Container $target_container is already running."
      if interactive; then
        ask "Attach to the container? (y/n)" n answer
        if [ "${answer}" = "y" ]; then
          attach_to_container "target_container"
        else
          info "You answered '${answer}' instead of 'y'; not attaching."
        fi
      else
        info "You can attach to it by running \`dock -a\`."
      fi
      return 1
    else
      error "Container $target_container already exists but is stopped."
      if interactive; then
        ask "Destroy existing container and create new one? (y/n)" n answer
        if [ "${answer}" = "y" ]; then
          notice "Destroying container $target_container..."
          destroy_container $target_container
          notice "Container $target_container destroyed."
          return
        else
          info "You answered '${answer}' instead of 'y'; not attaching."
        fi
      else
        info "You can ensure it is destroyed before starting a new container by including the -f flag."
      fi
      return 1
    fi
  fi
}

compile_run_args() {
  if [ ${#optional_env[@]} -gt 0 ]; then
    for var_name in "${optional_env[@]}"; do
      if [ -n "${!var_name+x}" ]; then
        env+=("${var_name}=${!var_name}")
      fi
    done
  fi

  if [ ${#required_env[@]} -gt 0 ]; then
    for var_name in "${required_env[@]}"; do
      if [ -z "${!var_name+x}" ]; then
        error "Environment variable ${var_name} is required but not set!"
        exit 1
      else
        env+=("${var_name}=${!var_name}")
      fi
    done
  fi

  run_args+=("--name" "$container_name")
  run_args+=("--workdir" "$workspace_dir")
  run_args+=("--detach-keys" "$detach_keys")

  if [ -n "${container_hostname+x}" ]; then
    run_args+=("--hostname" "$container_hostname")
  fi

  if [ -n "${entrypoint+x}" ]; then
    run_args+=("--entrypoint" "$entrypoint")
  fi

  if [ ${#env[@]} -gt 0 ]; then
    for e in "${env[@]}"; do
      run_args+=("--env" "$e")
    done
  fi

  if ! $dock_in_dock; then
    run_args+=("--env" "INSIDE_DOCK=1")
  fi

  process_exposed_ports
  if [ ${#published_ports[@]} -gt 0 ]; then
    for p in "${published_ports[@]}"; do
      run_args+=("--publish" "$p")
    done
  fi

  # Mount repository in the container
  volumes+=("$repo_root:$workspace_dir:rw")
  if [ ${#volumes[@]} -gt 0 ]; then
    for v in "${volumes[@]}"; do
      run_args+=("--volume" "$v")
    done
  fi

  if [ ${#labels[@]} -gt 0 ]; then
    for l in "${labels[@]}"; do
      run_args+=("--label" "$l")
    done
  fi

  if $detach; then
    run_args+=("--detach")
  else
    # Otherwise keep STDIN open and auto-remove the container on exit
    run_args+=("--interactive" "--rm")
  fi

  # Default to enabling --tty flag if STDIN (fd 0) is a TTY
  # `docker run` will fail if we specify this without a TTY being present
  if $force_tty || interactive; then
    run_args+=("--tty")
  fi

  if $privileged; then
    run_args+=("--privileged")
  fi
}

################################################################################

if [ -n "${DEBUG+x}" ]; then
  set -x
fi

if [ -n "${QUIET+x}" ] && [ "$QUIET" -eq 1 ]; then
  quiet=true
fi

# Need to scan for help flag before running `check_dependencies` since user
# may be trying to just view documentation and doesn't care if dependencies are
# installed.
while getopts ":hqvV" opt; do
  case $opt in
    h)
      display_usage
      exit
      ;;
    q)
      quiet=true
      ;;
    v)
      echo "$(dock_version)"
      exit
      ;;
    V)
      display_debug_version_info
      exit
      ;;
  esac
done
OPTIND=1 # Reset index so that we can parse the arguments with getopts again

check_dependencies

# Need to pass original arguments so argument processing works
initialize_variables "$@"
while getopts "ac:de:fqt:" opt; do
  case $opt in
    a)
      attach_to_container
      ;;
    c)
      # Already processed earlier. Here to avoid parser warnings.
      ;;
    t)
      terraform_container "$OPTARG"
      exit
      ;;
    d)
      detach=true
      ;;
    e)
      extend_container "$OPTARG"
      exit
      ;;
    f)
      destroy_container
      ;;
    q)
      # Already processed earlier. Here to avoid parser warnings.
      ;;
    /?)
      error "Invalid option -$opt"
      display_usage
      exit 1
      ;;
  esac
done

if [ $# -ge $OPTIND ]; then
  # Set command to remaining unparsed arguments
  # (overrides anything that was defined in $dock_file)
  command_args=("${@:$OPTIND}")
fi

# If we're already inside a Dock environment, just execute the command.
# This allows us to reuse scripts with dock in their shebang line in other
# Dock-ified scripts without invoking dock-within-dock (which is likely not what
# we want).
if [ -n "${INSIDE_DOCK+x}" ]; then
  exec "${command_args[@]}"
fi

check_for_existing_container

compile_run_args

if [ -n "$dockerfile" ]; then
  image="$repo:dock"

  notice "Building $dockerfile into image $image..."
  if $pull; then
    build_args+=("--pull")
  fi
  build_args+=("--file" "$dockerfile" "--tag" "$image" "$build_context")
  if quiet; then
    "${build_args[@]}" 2>&1 >/dev/null
  else
    "${build_args[@]}"
  fi
  notice "$dockerfile built into $image!"

elif [ -n "$image" ] && $pull; then
  notice "Ensuring we have the latest version of $image locally..."
  pull_args=("docker" "pull" "$image")
  if quiet; then
    "${pull_args[@]}" 2>&1 >/dev/null
  else
    "${pull_args[@]}"
  fi
elif [ -z "$image" ]; then
  error "Must specify either an image to run or a Dockerfile to build and run!"
  info "(is there a $default_conf_file file in your current directory?)"
  exit 1
fi

run_args+=("$image")
if [ "${#command_args[@]}" -gt 0 ]; then
  run_args+=("${command_args[@]}")
fi

notice "Starting container $container_name from image $image"

restore_stdout

exec "${run_args[@]}"
